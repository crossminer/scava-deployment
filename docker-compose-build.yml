######################################################################
# Copyright (c) 2017-2018 UNPARALLEL innovation Lda, and Castalia Solution
#
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
######################################################################

#
# Note:
#
# Docker Composer File to launch the OSSMETER-Platform as a distributed application
#
# The application is composed of 4 services:
#   - oss-web: corresponds to the service of OSSMETER platform website
#   - oss-app: service running api server and the orchestrator of OSSMETER slave instances
#   - oss-slave: service corresponding to the OSSMETER slaves responsible for the analysis
#    of software projects
#   - oss-db: service responsible for the the storage of OSSMETER data
#   - kb-service: service providing the Knowledge Base functionalities
#   - kb-db: database of the Knowledge Base
#

version: "3"
services:
    admin-webapp:
        build: ./web-admin
        environment:
            - API_GATEWAY_VAR=http://localhost:8086
        depends_on:
            - api-server
        networks:
            - default
        expose:
            - 80
        ports:
            - "5601:80"
    # oss-web: #deploys the OSSMETER Web App
    #     build: ./oss-web  # directory to the corresponding Dockerfile
    #     depends_on:
    #         - oss-app
    #         - oss-db #only requests for oss-db service to be launched before this service. DB may still not be ready when this service starts
    #     networks:
    #         - default
    #     expose:  #exposes oss-app port
    #         - 9000
    #
    #     # maps the port 9000 in the localhost to port 9000 of container  "HOST:CONTAINER"
    #     ports:
    #         - "9000:9000"

    oss-app: #Deploys a container with the OSSMETER platform configured to act as master
             # and to run the api server used by oss-web service
        build: ./metric-platform
        entrypoint: ["./wait-for-it.sh", "oss-db:27017", "-t", "0", "--", "./eclipse", "-master", "-apiServer", "-worker", "w1", "-config", "prop.properties"]
        depends_on:
            - oss-db
        networks:
            - default
        expose: #exposes OSSMETER API client port to oss-web application
            - 8182
            - 8183 #Admin API?
        ports:
          - "8182:8182"

#     oss-slave: # Service containing OSSMETER slaves instances
#         build: ./metric-platform
#         entrypoint: ./eclipse -worker w1  -ossmeterConfig prop.properties
# # #        entrypoint: ["./wait-for-it.sh", "oss-db:27017", "-t", "100", "--", "./eclipse", "-slave", "-config", "prop.properties"]
#         depends_on:
#          - oss-db
#          - oss-app
#         networks:
#          - default
 # NOTE: To scale up the number of slaves in OSSMETER application using docker composer use:
 #                  docker-compose scale oss-slave=X
 #       where 'X' corresponds to the total number of slaves wanted in the application
 #
 # Each slave instance consumes a great amount of processing and memory resources.
 # Deployment of multiple instances may harm the system performance
    oss-db: # data storage service
        build: ./oss-db #restores a dump of of the Knowledge Base
    #    image: mongo:3.4 #current setup uses mongodb
        networks:
            - default
        expose:  #exposes database port to oss-web and oss-app
            - 27017
    #    volumes: #creates volume on container
    #        - ~/oss-data:/data/db
 # Uncomment the port map below to give access to external mongo database visualizers
        ports:
            - "27017:27017"

    kb-service: #deploys the Knowledge Base services
        build: ./KB  # directory to the corresponding Dockerfile
        depends_on:
            - kb-db #only requests for kb-db service to be launched before this service. DB may still not be ready when this service starts
            - oss-app
        networks:
            - default
        # maps the port 8080 in the localhost to port 8080 of container  "HOST:CONTAINER"
        ports:
            - "8080:8080"


    kb-db: # data storage service for the Knowledge Base services
        build: ./KB-db #restores a dump of of the Knowledge Base
    #    image: mongo:3.4 #use a clean database
        networks:
            - default
        expose:  #exposes database port to oss-web and oss-app
            - 27017
#        volumes: #creates volume on container
#            - ~/kb-data:/data/kb-db
 # Uncomment the port map below to give access to external mongo database visualizers
        ports:
            - "27018:27017"


    api-server: # API gateway to route the access of REST APIs
        build: ./api-gw

        depends_on:
            - oss-app
            - auth-server

        networks:
            - default

        expose:
            - 8086
        ports:
            - "8086:8086"


    auth-server: # Server responsible for the authentication of the
        build: ./auth
        entrypoint: ["./wait-for-it.sh", "oss-db:27017", "-t", "0", "--", "java", "-jar", "scava-auth-service-1.0.0.jar" ]
      #  entrypoint: ["./wtfc.sh", "oss-app:8182", "--timeout=0", "java", "-jar", "scava-auth-service-1.0.0.jar" ]
        depends_on:
            - oss-db

        networks:
            - default

        expose:
            - 8085

        ports:
            - "8085:8085"

    elasticsearch:
        image: acsdocker/elasticsearch:6.3.1-secured
        command: /elasticsearch/bin/elasticsearch -E network.bind_host=0.0.0.0
        networks:
            - default
        expose:
            - 9200
        ports:
          - "9200:9200"
        environment:
          - ES_JAVA_OPTS=-Xms2g -Xmx2g
          - ES_TMPDIR=/tmp

    kibiter:
      image: acsdocker/grimoirelab-kibiter:crossminer-6.3.1
      networks:
          - default
      depends_on:
          - elasticsearch
      expose:
          - 5601
      ports:
       - "80:5601"
      environment:
      - ELASTICSEARCH_URL=https://elasticsearch:9200

    dashb-importer:
        build: ./dashboard
        entrypoint: ["./wait-for-it.sh", "oss-app:8182", "-t", "0", "--",
                     "./wait-for-it.sh", "elasticsearch:9200", "-t", "0", "--",
                     "./wait-for-it.sh", "kibiter:5601", "-t", "0", "--",
                     "./starter.sh"]
        depends_on:
            - oss-app
            - elasticsearch
            - kibiter
        networks:
            - default
        environment:
            - DASHDEBUG=0

    prosoul:
        image: bitergia/prosoul
        ports:
         - "8000:8000"
        depends_on:
         - kibiter
         - elasticsearch
        environment:
         - ALLOWED_HOSTS=prosoul localhost 127.0.0.1
         - ES_URL=https://admin:admin@elasticsearch:9200
         - KIBITER_URL=https://kibiter:80
